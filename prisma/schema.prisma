// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String        @id @default(uuid())
  name      String
  email     String        @unique
  password  String
  projects  ProjectUser[] // Relación: Un usuario puede estar en varios proyectos
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  Project   Project[]
}

model Project {
  id              String        @id @default(uuid())
  name            String
  description     String? // Descripción del proyecto (opcional)
  idealClient     String? // Definición del cliente ideal
  shortTermGoals  String? // Objetivos a corto plazo
  mediumTermGoals String? // Objetivos a mediano plazo
  longTermGoals   String? // Objetivos a largo plazo
  ownerId         String
  owner           User          @relation(fields: [ownerId], references: [id])
  members         ProjectUser[]
  events          Event[] // Relación con Event
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model ProjectUser {
  id        String  @id @default(uuid())
  userId    String // Clave foránea a User
  projectId String // Clave foránea a Project
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId]) // Evita duplicados (un usuario no puede estar dos veces en el mismo proyecto)
}

model Event {
  id          String   @id @default(uuid())
  cycle       String
  title       String
  socialMedia String
  category    String
  objective   String
  format      String
  text        String
  hashtags    String?
  time        DateTime // HORA Y FECHA DEL EVENTO
  status      String
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
